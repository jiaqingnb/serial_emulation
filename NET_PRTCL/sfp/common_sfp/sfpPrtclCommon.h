
/*******************************************************************************
* 文件名    ：  sfpPrtclCommon.h
* 版权说明  ：  
* 版本号    ：  1.0  
* 创建时间  ：  2008.07.29
* 作者      ：  
* 功能描述  ：  此文件为协议公用文件头文件，包含堆栈相关函数、Type + ID到设备名的转换函数、
                返回当前时刻Tick函数
* 使用注意  ： 
                无
* 修改记录  ：  
    2009-8-27 15:01:23修改记录
        1.修改类型，使用CommonTypes.h中的定义
	修改标签：peipei.wang20111011
    修改内容：增加IsTimeOut.h；
*******************************************************************************/


#ifndef SFPPRTCLCOMMON_H
#define SFPPRTCLCOMMON_H

#include "sfpplatform.h"
#include "Convert.h"
#include "CommonTypes.h"
#include "CommonRecord.h"
#if CBTC_WINDOWS
   #include "sfpWindowsTimeCounter.h"
#endif
#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************************
* 功能描述      : 初始化链路管理表堆栈
*                 初始化特定大小特定结构的堆栈,不同的结构体只需要采用压入不同的指针使用方式便可以做成不同的管理堆栈
* 输入参数      : StackElement* s				 堆栈的指针	
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : 成功返回1,失败返回0        
*******************************************************************************************/
UINT8 init_Lnk_Mngr_stack(StackElement *s);


/******************************************************************************************
* 功能描述      : 初始化冗余一维链表节点堆栈
*                 初始化特定大小特定结构的堆栈,不同的结构体只需要采用压入不同的指针使用方式便可以做成不同的管理堆栈
* 输入参数      : StackElement* s				 堆栈的指针	
*                 UINT16 DataSize                节点数据存储空间的大小
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : 成功返回1,失败返回0        
*******************************************************************************************/
UINT8 Init_InputBuffer_Stack(StackElement *s, UINT16 DataSize);

																			   
/******************************************************************************************
* 功能描述      : 初始化协议输出链表堆栈
*                 初始化特定大小特定结构的堆栈,不同的结构体只需要采用压入不同的指针使用方式便可以做成不同的管理堆栈
* 输入参数      : StackElement* s				 堆栈的指针	
*                 UINT16 DataSize                节点数据存储空间的大小
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : 成功返回1,失败返回0        
*******************************************************************************************/
UINT8 InitOutputStack(StackElement *s,UINT16 DataSize);


/******************************************************************************************
* 功能描述      : 释放三个链表堆栈动态分配的空间 ——[链路管理表对应的堆栈，冗余链表对应的堆栈，输出单元链表对应的堆栈]
* 输入参数      : struc_Unify_Info *pUnifyInfo  要释放空间对应的统一结构体
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : 成功返回1       
*******************************************************************************************/
UINT8 FreeLnkSpace(struc_Unify_Info *pUnifyInfo);


/************************************************************************/
/* 堆栈的公用操作                                                       */
/************************************************************************/

/******************************************************************************************
* 功能描述      : 向堆栈中压入一个节点,返回值为压入结果，如果成功则返回1，否则返回0
* 输入参数      : StackElement* s			堆栈的指针
*                 UINT32 node			    节点指针
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : 成功返回1,失败返回0        
*******************************************************************************************/
UINT8 PushStack(StackElement *s,void* node);


/******************************************************************************************
* 功能描述      : 从堆栈中弹出一个节点,返回值为一个指针信息，这时候只需要将这个值强制转换成对应的类型即可
* 输入参数      : StackElement* s		堆栈的指针
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : 成功弹出一个节点返回节点的地址，否则返回0        
*******************************************************************************************/
void* PopStack(StackElement *s);

/******************************************************************************************
* 功能描述      : 返回当前时刻的函数
*                 针对不同的平台进行不同的处理
*                 Windows平台：通过调用函数GetCurTime()来获取当前时刻
*                 VxWorks平台：平台提供当前时钟值变量的指针
* 输入参数      : struct Unify_Info *pUnifyInfo   平台统一结构体
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : 当前时刻        
*******************************************************************************************/
UINT32 GetTick(struc_Unify_Info *pUnifyInfo);


/******************************************************************************************
* 功能描述      : 将设备TYPE和设备ID转换成long型的设备名
* 输入参数      : UINT8 devType 设备类型
*                 UINT8 devID  设备ID
* 输入输出参数  : 
* 输出参数      :
* 全局变量      :
* 返回值        : unsigned INT32 型的设备名        
*******************************************************************************************/
UINT32 TypeIdToName(UINT8 devType,UINT8 devID);


/*
* 功能描述      : 判断是否超时,判断当前时间距离开始时间的时间差值小于允许的时间。
* 输入参数      : UINT32 Curtime      当前时间
                  UINT32 StartTime    开始时间
                  UINT32 AllowTimeout 允许的超时时间
* 输入输出参数  : 
* 输出参数      :无
* 全局变量      :
* 返回值        : 0: 不超时  0xff:当前时间小于开始时间，其他值：超时    
*/
UINT8 IsTimeOut(UINT32 Curtime,UINT32 StartTime,UINT32 AllowTimeout);

#ifdef __cplusplus
}
#endif


#endif
